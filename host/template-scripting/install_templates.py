#!/usr/bin/env python
# coding=utf-8
"""
This script installs custom templates (defined via <filename>.json.inc files
as auto-generated by ./scripted_templates.py - or build_templates.sh).

More specifically, it will try to:
* download the template configuration from the device
* check which of the custom templates should be added (or overwritten,
  see command line arguments/help)
* optionally, remove existing templates (if you provide them via --remove)
* upload the required files
* restart the system UI
"""

import argparse
import os
import sys
import subprocess
import json


def parse_args():
    """Returns the parsed command line arguments."""

    parser = argparse.ArgumentParser()

    parser.add_argument('--host', dest='hostname', action='store', type=str,
        default='10.11.99.1', help='Specify IP or hostname of the device, default: %(default)s')

    parser.add_argument('--timeout', dest='timeout', action='store', type=int,
        default=10, help='Specify connection timeout in seconds, default: %(default)d')

    parser.add_argument('--template-dir', dest='template_dir', action='store',
        type=str, default='.',
        help="Path to custom templates' directory, default: [%(default)s]")

    parser.add_argument('--overwrite', dest='overwrite', action='store_true', default=False,
        help='Enable overwriting already existing (custom) templates, default: %(default)s')
    
    parser.add_argument('--remove', dest='remove_names', action='store', nargs='+', type=str,
        help='Specify the display names (don''t forget to use ''"'') of templates which should be removed from the device.')

    return parser.parse_args()


def load_custom_templates(search_folder):
    """Loads all template configurations from the .json.inc files within the 'search_folder'."""

    print(f'Loading custom template .json.inc files from [{search_folder}]:')
    tpl_configs = list()
    for f in os.listdir(search_folder):
        if f.endswith('.json.inc'):
            with open(os.path.join(search_folder, f), 'r') as jf:
                tpl = json.load(jf)
                print(f'* {len(tpl)} template(s) from "{f}"')
                for e in tpl:
                    tpl_configs.append(e)
    if len(tpl_configs) == 0:
        print('* No custom template configuration found!')
    return tpl_configs


def add_template_configs(args, tpl_configs, tpl_json_filename='templates.json'):
    print('Adding custom template configs:')

    with open(tpl_json_filename, 'r') as jf:
        tcfg = json.load(jf)

    # Append every custom template to the list of available templates
    print(f"* Loaded {len(tcfg['templates'])} currently available template configurations.")

    
    def already_exists(cfg, templates):
        for t in templates:
            if t['name'] == cfg['name']:
                tl = t['landscape'] if 'landscape' in t else False
                cl = cfg['landscape'] if 'landscape' in cfg else False
                if tl == cl:
                    return True
        return False

    added_cfgs = list()
    to_replace = list()
    for cfg in tpl_configs:
        extra = ' (landscape)' if cfg['landscape'] else ''

        if already_exists(cfg, tcfg['templates']):
            if args.overwrite:
                to_replace.append(cfg)
            else:
                print(f"* Skipping template {cfg['name']}{extra} as it's already installed.")
        else:
            print(f"* Adding template {cfg['name']}{extra}.")
            tcfg['templates'].append(cfg)
            added_cfgs.append(cfg)
    # Replace (if some should be explicitly overwritten)
    for cfg in to_replace:
        extra = ' (landscape)' if cfg['landscape'] else ''
        print(f"* Overwriting existing template {cfg['name']}{extra}.")
        def keep(e):
            if e['name'] != cfg['name']:
                return True
            el = e['landscape'] if 'landscape' in e else False
            cl = cfg['landscape'] if 'landscape' in cfg else False
            return el != cl

        tcfg['templates'] = [e for e in tcfg['templates'] if keep(e)]
        tcfg['templates'].append(cfg)
        added_cfgs.append(cfg)

    print(f"* Saving {len(tcfg['templates'])} template configurations.")
    with open(tpl_json_filename, 'w') as jf:
        json.dump(tcfg, jf, indent=2)
    return added_cfgs


def remove_unused_templates(unused_names, tpl_json_filename='templates.json'):
    """Removes all matching configurations from the local templates.json"""
    print('Removing unused template configs:')

    with open(tpl_json_filename, 'r') as jf:
        tcfg = json.load(jf)

    print(f"* Loaded {len(tcfg['templates'])} template configurations.")
    
    def keep(tpl_entry):
        return tpl_entry['name'] not in unused_names

    removed_names = [e['name'] for e in tcfg['templates'] if not keep(e)]
    tcfg['templates'] = [e for e in tcfg['templates'] if keep(e)]
    num_removed = len(removed_names)
    if num_removed > 0:
        print(f'Removed the following templates: {removed_names}')
        print(f"There are {len(tcfg['templates'])} templates left.")
        with open(tpl_json_filename, 'w') as jf:
            json.dump(tcfg, jf, indent=2)
    else:
        print('No templates were removed.')

    return num_removed


def download_tpl_conf(args):
    """Downloads the templates.json from the device."""
    print(f'Downloading templates.json from "{args.hostname}"')
    rv = subprocess.call(f'scp -o ConnectTimeout={args.timeout} root@{args.hostname}:/usr/share/remarkable/templates/templates.json templates.json', shell=True)
    return rv == 0


def upload_helper(args, filenames):
    """Runs a single SCP to copy the list of given filenames to the device."""
    if not isinstance(filenames, list) or len(filenames) == 1:
        fstr = os.path.join(args.template_dir, filenames[0] if isinstance(filenames, list) else filenames)
    else:
        # Joining an empty path enforces a trailing slash/path separator
        # fstr = os.path.join(args.template_dir, '') + '\\{' + ','.join(filenames) + '\\}'
        fstr = ' '.join([os.path.join(args.template_dir, f) for f in filenames])
    cmd = f'scp -o ConnectTimeout={args.timeout} {fstr} root@{args.hostname}:/usr/share/remarkable/templates/'
    # print('WOULD RUN', cmd)
    rv = subprocess.call(cmd, shell=True)
    return rv == 0


def upload_templates(args, tpl_configs):
    print('Uploading custom templates and configuration file:')
    if len(tpl_configs) == 0:
        print('> Nothing to upload!')
        return True
    uploaded_filenames = list()
    for cfg in tpl_configs:
        fname = cfg['filename']
        if fname in uploaded_filenames:
            # Skip second config entry for portrait + landscape templates
            continue
        uploaded_filenames.append(fname)
        tname = cfg['name']
        print(f"* Uploading {tname}")
        
        if not upload_helper(args, [f'{fname}.svg', f'{fname}.png']):
            print(f'[ERROR] Cannot upload template files {fname}.[svg,png]')
            return False
    print("* Uploading templates.json")
    if not upload_helper(args, 'templates.json'):
        print('[ERROR] Cannot upload templates.json')
        return False
    # Restart xochitl
    print("* Restarting device UI")
    rv = subprocess.call(f'ssh -o ConnectTimeout={args.timeout} root@{args.hostname} "systemctl restart xochitl"', shell=True)
    return rv == 0


def install_and_cleanup_templates():
    args = parse_args()

    tpls = load_custom_templates(args.template_dir)
    if len(tpls) == 0:
        return 1

    print()
    if not download_tpl_conf(args):
        print('[ERROR] Cannot download templates.json from the device - please verify the SSH connection!')
        return 2

    print()
    added_cfgs = add_template_configs(args, tpls, 'templates.json')
    num_added = len(added_cfgs)
    if num_added == 0:
        print('> No custom templates have been added!')

    if args.remove_names is not None:
        print()
        # #TODO 
        #                                       'Dots S bottom',
        #                                       'Dots S top',
        #                                       'Grid bottom',
        #                                       'Grid top',
        #                                       'Lined bottom',
        #                                       'Lined top',
        #                                       'US College',
        #                                       'US Legal',
        #                                       'Weekplanner US'
        num_removed = remove_unused_templates(args.remove_names, 'templates.json')
        if num_removed == 0:
            print('> No unused templates have been removed!')
    else:
        num_removed = 0

    if num_added == 0 and num_removed == 0:
        return 0

    print()
    if not upload_templates(args, added_cfgs):
        print('[ERROR] Cannot upload - please verify the SSH connection!')
        return 2
    return 0


if __name__ == '__main__':
    rv = install_and_cleanup_templates()
    sys.exit(rv)
